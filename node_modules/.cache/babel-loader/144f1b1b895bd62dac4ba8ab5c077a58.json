{"ast":null,"code":"'use strict'; // A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Nodeâ€™s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexports.basename = basename;\nexports.dirname = dirname;\nexports.extname = extname;\nexports.join = join;\nexports.sep = '/';\n\nfunction basename(path, ext) {\n  var start = 0;\n  var end = -1;\n  var index;\n  var firstNonSlashEnd;\n  var seenNonSlash;\n  var extIndex;\n\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string');\n  }\n\n  assertPath(path);\n  index = path.length;\n\n  if (ext === undefined || !ext.length || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47\n      /* `/` */\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1;\n          break;\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true;\n        end = index + 1;\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end);\n  }\n\n  if (ext === path) {\n    return '';\n  }\n\n  firstNonSlashEnd = -1;\n  extIndex = ext.length - 1;\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1;\n        break;\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true;\n        firstNonSlashEnd = index + 1;\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index;\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1;\n          end = firstNonSlashEnd;\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd;\n  } else if (end < 0) {\n    end = path.length;\n  }\n\n  return path.slice(start, end);\n}\n\nfunction dirname(path) {\n  var end;\n  var unmatchedSlash;\n  var index;\n  assertPath(path);\n\n  if (!path.length) {\n    return '.';\n  }\n\n  end = -1;\n  index = path.length; // Prefix `--` is important to not run on `0`.\n\n  while (--index) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n      if (unmatchedSlash) {\n        end = index;\n        break;\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true;\n    }\n  }\n\n  return end < 0 ? path.charCodeAt(0) === 47\n  /* `/` */\n  ? '/' : '.' : end === 1 && path.charCodeAt(0) === 47\n  /* `/` */\n  ? '//' : path.slice(0, end);\n}\n\nfunction extname(path) {\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1; // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n\n  var preDotState = 0;\n  var unmatchedSlash;\n  var code;\n  var index;\n  assertPath(path);\n  index = path.length;\n\n  while (index--) {\n    code = path.charCodeAt(index);\n\n    if (code === 47\n    /* `/` */\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1;\n        break;\n      }\n\n      continue;\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true;\n      end = index + 1;\n    }\n\n    if (code === 46\n    /* `.` */\n    ) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index;\n      } else if (preDotState !== 1) {\n        preDotState = 1;\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1;\n    }\n  }\n\n  if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.\n  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n\n  return path.slice(startDot, end);\n}\n\nfunction join() {\n  var index = -1;\n  var joined;\n\n  while (++index < arguments.length) {\n    assertPath(arguments[index]);\n\n    if (arguments[index]) {\n      joined = joined === undefined ? arguments[index] : joined + '/' + arguments[index];\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined);\n} // Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\n\n\nfunction normalize(path) {\n  var absolute;\n  var value;\n  assertPath(path);\n  absolute = path.charCodeAt(0) === 47;\n  /* `/` */\n  // Normalize the path according to POSIX rules.\n\n  value = normalizeString(path, !absolute);\n\n  if (!value.length && !absolute) {\n    value = '.';\n  }\n\n  if (value.length && path.charCodeAt(path.length - 1) === 47\n  /* / */\n  ) {\n    value += '/';\n  }\n\n  return absolute ? '/' + value : value;\n} // Resolve `.` and `..` elements in a path with directory names.\n\n\nfunction normalizeString(path, allowAboveRoot) {\n  var result = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var index = -1;\n  var code;\n  var lastSlashIndex;\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index);\n    } else if (code === 47\n    /* `/` */\n    ) {\n      break;\n    } else {\n      code = 47;\n      /* `/` */\n    }\n\n    if (code === 47\n    /* `/` */\n    ) {\n      if (lastSlash === index - 1 || dots === 1) {// Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46\n        /* `.` */\n        || result.charCodeAt(result.length - 2) !== 46\n        /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/');\n            /* istanbul ignore else - No clue how to cover it. */\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = '';\n                lastSegmentLength = 0;\n              } else {\n                result = result.slice(0, lastSlashIndex);\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/');\n              }\n\n              lastSlash = index;\n              dots = 0;\n              continue;\n            }\n          } else if (result.length) {\n            result = '';\n            lastSegmentLength = 0;\n            lastSlash = index;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length ? result + '/..' : '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (result.length) {\n          result += '/' + path.slice(lastSlash + 1, index);\n        } else {\n          result = path.slice(lastSlash + 1, index);\n        }\n\n        lastSegmentLength = index - lastSlash - 1;\n      }\n\n      lastSlash = index;\n      dots = 0;\n    } else if (code === 46\n    /* `.` */\n    && dots > -1) {\n      dots++;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return result;\n}\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}","map":{"version":3,"names":["exports","basename","dirname","extname","join","sep","path","ext","start","end","index","firstNonSlashEnd","seenNonSlash","extIndex","undefined","TypeError","assertPath","length","charCodeAt","slice","unmatchedSlash","startDot","startPart","preDotState","code","joined","arguments","normalize","absolute","value","normalizeString","allowAboveRoot","result","lastSegmentLength","lastSlash","dots","lastSlashIndex","lastIndexOf","JSON","stringify"],"sources":["/Users/zhangruikai/Desktop/rudyzhang123.github.io/node_modules/vfile/lib/minpath.browser.js"],"sourcesContent":["'use strict'\n\n// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Nodeâ€™s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexports.basename = basename\nexports.dirname = dirname\nexports.extname = extname\nexports.join = join\nexports.sep = '/'\n\nfunction basename(path, ext) {\n  var start = 0\n  var end = -1\n  var index\n  var firstNonSlashEnd\n  var seenNonSlash\n  var extIndex\n\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  index = path.length\n\n  if (ext === undefined || !ext.length || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  firstNonSlashEnd = -1\n  extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\nfunction dirname(path) {\n  var end\n  var unmatchedSlash\n  var index\n\n  assertPath(path)\n\n  if (!path.length) {\n    return '.'\n  }\n\n  end = -1\n  index = path.length\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\nfunction extname(path) {\n  var startDot = -1\n  var startPart = 0\n  var end = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  var preDotState = 0\n  var unmatchedSlash\n  var code\n  var index\n\n  assertPath(path)\n\n  index = path.length\n\n  while (index--) {\n    code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\nfunction join() {\n  var index = -1\n  var joined\n\n  while (++index < arguments.length) {\n    assertPath(arguments[index])\n\n    if (arguments[index]) {\n      joined =\n        joined === undefined\n          ? arguments[index]\n          : joined + '/' + arguments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  var absolute\n  var value\n\n  assertPath(path)\n\n  absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  value = normalizeString(path, !absolute)\n\n  if (!value.length && !absolute) {\n    value = '.'\n  }\n\n  if (value.length && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n// Resolve `.` and `..` elements in a path with directory names.\nfunction normalizeString(path, allowAboveRoot) {\n  var result = ''\n  var lastSegmentLength = 0\n  var lastSlash = -1\n  var dots = 0\n  var index = -1\n  var code\n  var lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            /* istanbul ignore else - No clue how to cover it. */\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}