{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\n\nvar factorySpace = require('./factory-space.js');\n\nvar prefixSize = require('../util/prefix-size.js');\n\nvar subtokenize = require('../util/subtokenize.js'); // No name because it must not be turned off.\n\n\nvar content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent,\n  interruptible: true,\n  lazy: true\n};\nvar continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}; // Content is transparent: it’s parsed right now. That way, definitions are also\n// parsed right now: before text in paragraphs (specifically, media) are parsed.\n\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\nfunction tokenizeContent(effects, ok) {\n  var previous;\n  return start;\n\n  function start(code) {\n    effects.enter('content');\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    });\n    return data(code);\n  }\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    } // Data.\n\n\n    effects.consume(code);\n    return data;\n  }\n\n  function contentEnd(code) {\n    effects.exit('chunkContent');\n    effects.exit('content');\n    return ok(code);\n  }\n\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit('chunkContent');\n    previous = previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous: previous\n    });\n    return data;\n  }\n}\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  var self = this;\n  return startLookahead;\n\n  function startLookahead(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, prefixed, 'linePrefix');\n  }\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    if (self.parser.constructs.disable.null.indexOf('codeIndented') > -1 || prefixSize(self.events, 'linePrefix') < 4) {\n      return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n    }\n\n    return ok(code);\n  }\n}\n\nmodule.exports = content;","map":{"version":3,"names":["markdownLineEnding","require","factorySpace","prefixSize","subtokenize","content","tokenize","tokenizeContent","resolve","resolveContent","interruptible","lazy","continuationConstruct","tokenizeContinuation","partial","events","effects","ok","previous","start","code","enter","contentType","data","contentEnd","check","contentContinue","consume","exit","next","nok","self","startLookahead","prefixed","parser","constructs","disable","null","indexOf","interrupt","flow","module","exports"],"sources":["/Users/zhangruikai/Desktop/rudyzhang123.github.io/node_modules/micromark/dist/tokenize/content.js"],"sourcesContent":["'use strict'\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar factorySpace = require('./factory-space.js')\nvar prefixSize = require('../util/prefix-size.js')\nvar subtokenize = require('../util/subtokenize.js')\n\n// No name because it must not be turned off.\nvar content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent,\n  interruptible: true,\n  lazy: true\n}\nvar continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n} // Content is transparent: it’s parsed right now. That way, definitions are also\n// parsed right now: before text in paragraphs (specifically, media) are parsed.\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\nfunction tokenizeContent(effects, ok) {\n  var previous\n  return start\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous = previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous: previous\n    })\n    return data\n  }\n}\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  var self = this\n  return startLookahead\n\n  function startLookahead(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (\n      self.parser.constructs.disable.null.indexOf('codeIndented') > -1 ||\n      prefixSize(self.events, 'linePrefix') < 4\n    ) {\n      return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n    }\n\n    return ok(code)\n  }\n}\n\nmodule.exports = content\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}