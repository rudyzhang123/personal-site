{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\n\nvar factorySpace = require('./factory-space.js');\n\nvar partialBlankLine = {\n  tokenize: tokenizePartialBlankLine,\n  partial: true\n};\n\nfunction tokenizePartialBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix');\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}\n\nmodule.exports = partialBlankLine;","map":{"version":3,"names":["markdownLineEnding","require","factorySpace","partialBlankLine","tokenize","tokenizePartialBlankLine","partial","effects","ok","nok","afterWhitespace","code","module","exports"],"sources":["/Users/zhangruikai/Desktop/rudyzhang123.github.io/node_modules/micromark/dist/tokenize/partial-blank-line.js"],"sourcesContent":["'use strict'\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar factorySpace = require('./factory-space.js')\n\nvar partialBlankLine = {\n  tokenize: tokenizePartialBlankLine,\n  partial: true\n}\n\nfunction tokenizePartialBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n\nmodule.exports = partialBlankLine\n"],"mappings":"AAAA;;AAEA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sCAAD,CAAhC;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,oBAAD,CAA1B;;AAEA,IAAIE,gBAAgB,GAAG;EACrBC,QAAQ,EAAEC,wBADW;EAErBC,OAAO,EAAE;AAFY,CAAvB;;AAKA,SAASD,wBAAT,CAAkCE,OAAlC,EAA2CC,EAA3C,EAA+CC,GAA/C,EAAoD;EAClD,OAAOP,YAAY,CAACK,OAAD,EAAUG,eAAV,EAA2B,YAA3B,CAAnB;;EAEA,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;IAC7B,OAAOA,IAAI,KAAK,IAAT,IAAiBX,kBAAkB,CAACW,IAAD,CAAnC,GAA4CH,EAAE,CAACG,IAAD,CAA9C,GAAuDF,GAAG,CAACE,IAAD,CAAjE;EACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBV,gBAAjB"},"metadata":{},"sourceType":"script"}