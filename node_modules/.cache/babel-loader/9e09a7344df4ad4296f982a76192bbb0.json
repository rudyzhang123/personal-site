{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\n\nvar factorySpace = require('./factory-space.js');\n\nvar prefixSize = require('../util/prefix-size.js');\n\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js');\n\nvar codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  var self = this;\n  var closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  };\n  var initialPrefix = prefixSize(this.events, 'linePrefix');\n  var sizeOpen = 0;\n  var marker;\n  return start;\n\n  function start(code) {\n    effects.enter('codeFenced');\n    effects.enter('codeFencedFence');\n    effects.enter('codeFencedFenceSequence');\n    marker = code;\n    return sequenceOpen(code);\n  }\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n\n    effects.exit('codeFencedFenceSequence');\n    return sizeOpen < 3 ? nok(code) : factorySpace(effects, infoOpen, 'whitespace')(code);\n  }\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n\n    effects.enter('codeFencedFenceInfo');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return info(code);\n  }\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return factorySpace(effects, infoAfter, 'whitespace')(code);\n    }\n\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return info;\n  }\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n\n    effects.enter('codeFencedFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceMeta');\n      return openAfter(code);\n    }\n\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return meta;\n  }\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence');\n    return self.interrupt ? ok(code) : content(code);\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return effects.attempt(closingFenceConstruct, after, initialPrefix ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1) : content);\n    }\n\n    effects.enter('codeFlowValue');\n    return contentContinue(code);\n  }\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return content(code);\n    }\n\n    effects.consume(code);\n    return contentContinue;\n  }\n\n  function after(code) {\n    effects.exit('codeFenced');\n    return ok(code);\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0;\n    return factorySpace(effects, closingSequenceStart, 'linePrefix', this.parser.constructs.disable.null.indexOf('codeIndented') > -1 ? undefined : 4);\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence');\n      effects.enter('codeFencedFenceSequence');\n      return closingSequence(code);\n    }\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code);\n        size++;\n        return closingSequence;\n      }\n\n      if (size < sizeOpen) return nok(code);\n      effects.exit('codeFencedFenceSequence');\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code);\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence');\n        return ok(code);\n      }\n\n      return nok(code);\n    }\n  }\n}\n\nmodule.exports = codeFenced;","map":{"version":3,"names":["markdownLineEnding","require","factorySpace","prefixSize","markdownLineEndingOrSpace","codeFenced","name","tokenize","tokenizeCodeFenced","concrete","effects","ok","nok","self","closingFenceConstruct","tokenizeClosingFence","partial","initialPrefix","events","sizeOpen","marker","start","code","enter","sequenceOpen","consume","exit","infoOpen","openAfter","contentType","info","infoAfter","meta","interrupt","content","after","attempt","contentContinue","size","closingSequenceStart","parser","constructs","disable","null","indexOf","undefined","closingSequence","closingSequenceEnd","module","exports"],"sources":["/Users/zhangruikai/Desktop/rudyzhang123.github.io/node_modules/micromark/dist/tokenize/code-fenced.js"],"sourcesContent":["'use strict'\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar factorySpace = require('./factory-space.js')\nvar prefixSize = require('../util/prefix-size.js')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\n\nvar codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  var self = this\n  var closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  var initialPrefix = prefixSize(this.events, 'linePrefix')\n  var sizeOpen = 0\n  var marker\n  return start\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : content(code)\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return effects.attempt(\n        closingFenceConstruct,\n        after,\n        initialPrefix\n          ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1)\n          : content\n      )\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return content(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.indexOf('codeIndented') > -1\n        ? undefined\n        : 4\n    )\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n\nmodule.exports = codeFenced\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}