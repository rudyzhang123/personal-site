{"ast":null,"code":"'use strict';\n\nmodule.exports = convert;\n\nfunction convert(test) {\n  if (test == null) {\n    return ok;\n  }\n\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n\n  if (typeof test === 'object') {\n    return 'length' in test ? anyFactory(test) : allFactory(test);\n  }\n\n  if (typeof test === 'function') {\n    return test;\n  }\n\n  throw new Error('Expected function, string, or object as test');\n} // Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\n\n\nfunction allFactory(test) {\n  return all;\n\n  function all(node) {\n    var key;\n\n    for (key in test) {\n      if (node[key] !== test[key]) return false;\n    }\n\n    return true;\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = [];\n  var index = -1;\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index]);\n  }\n\n  return any;\n\n  function any() {\n    var index = -1;\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, arguments)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n} // Utility to convert a string into a function which checks a given node’s type\n// for said string.\n\n\nfunction typeFactory(test) {\n  return type;\n\n  function type(node) {\n    return Boolean(node && node.type === test);\n  }\n} // Utility to return true.\n\n\nfunction ok() {\n  return true;\n}","map":{"version":3,"names":["module","exports","convert","test","ok","typeFactory","anyFactory","allFactory","Error","all","node","key","tests","checks","index","length","any","apply","arguments","type","Boolean"],"sources":["/Users/zhangruikai/Desktop/rudyzhang123.github.io/node_modules/unist-util-is/convert.js"],"sourcesContent":["'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (test == null) {\n    return ok\n  }\n\n  if (typeof test === 'string') {\n    return typeFactory(test)\n  }\n\n  if (typeof test === 'object') {\n    return 'length' in test ? anyFactory(test) : allFactory(test)\n  }\n\n  if (typeof test === 'function') {\n    return test\n  }\n\n  throw new Error('Expected function, string, or object as test')\n}\n\n// Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\nfunction allFactory(test) {\n  return all\n\n  function all(node) {\n    var key\n\n    for (key in test) {\n      if (node[key] !== test[key]) return false\n    }\n\n    return true\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = []\n  var index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return any\n\n  function any() {\n    var index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string into a function which checks a given node’s type\n// for said string.\nfunction typeFactory(test) {\n  return type\n\n  function type(node) {\n    return Boolean(node && node.type === test)\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;EACrB,IAAIA,IAAI,IAAI,IAAZ,EAAkB;IAChB,OAAOC,EAAP;EACD;;EAED,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAOE,WAAW,CAACF,IAAD,CAAlB;EACD;;EAED,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAO,YAAYA,IAAZ,GAAmBG,UAAU,CAACH,IAAD,CAA7B,GAAsCI,UAAU,CAACJ,IAAD,CAAvD;EACD;;EAED,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;IAC9B,OAAOA,IAAP;EACD;;EAED,MAAM,IAAIK,KAAJ,CAAU,8CAAV,CAAN;AACD,C,CAED;AACA;;;AACA,SAASD,UAAT,CAAoBJ,IAApB,EAA0B;EACxB,OAAOM,GAAP;;EAEA,SAASA,GAAT,CAAaC,IAAb,EAAmB;IACjB,IAAIC,GAAJ;;IAEA,KAAKA,GAAL,IAAYR,IAAZ,EAAkB;MAChB,IAAIO,IAAI,CAACC,GAAD,CAAJ,KAAcR,IAAI,CAACQ,GAAD,CAAtB,EAA6B,OAAO,KAAP;IAC9B;;IAED,OAAO,IAAP;EACD;AACF;;AAED,SAASL,UAAT,CAAoBM,KAApB,EAA2B;EACzB,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,KAAK,GAAG,CAAC,CAAb;;EAEA,OAAO,EAAEA,KAAF,GAAUF,KAAK,CAACG,MAAvB,EAA+B;IAC7BF,MAAM,CAACC,KAAD,CAAN,GAAgBZ,OAAO,CAACU,KAAK,CAACE,KAAD,CAAN,CAAvB;EACD;;EAED,OAAOE,GAAP;;EAEA,SAASA,GAAT,GAAe;IACb,IAAIF,KAAK,GAAG,CAAC,CAAb;;IAEA,OAAO,EAAEA,KAAF,GAAUD,MAAM,CAACE,MAAxB,EAAgC;MAC9B,IAAIF,MAAM,CAACC,KAAD,CAAN,CAAcG,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAJ,EAA0C;QACxC,OAAO,IAAP;MACD;IACF;;IAED,OAAO,KAAP;EACD;AACF,C,CAED;AACA;;;AACA,SAASb,WAAT,CAAqBF,IAArB,EAA2B;EACzB,OAAOgB,IAAP;;EAEA,SAASA,IAAT,CAAcT,IAAd,EAAoB;IAClB,OAAOU,OAAO,CAACV,IAAI,IAAIA,IAAI,CAACS,IAAL,KAAchB,IAAvB,CAAd;EACD;AACF,C,CAED;;;AACA,SAASC,EAAT,GAAc;EACZ,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"script"}